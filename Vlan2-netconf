### vlan_config_job.py #####
from pyats.easypy import Task
import os

def main(runtime):
    # Define the test script file path
    script_path = os.path.join(os.path.dirname(__file__), 'vlan_config_test.py')

    # Execute the test script and wait for completion
    task = Task(testscript=script_path)
    task.start()
    task.wait()

##### vlan_config_test.py #####

from pyats import aetest
from network_lib import NetworkLibrary
import re

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Load the testbed
        self.testbed = NetworkLibrary.get_testbed()
        # Connect to the device
        self.device = NetworkLibrary.connect_to_device(self.testbed)
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

    @aetest.test
    def configure_vlan_id(self):
        vlan_id = 100
        vlan_name = "TestVLAN"
        ip_address = "192.168.10.1/24"

        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request(vlan_id, vlan_name, ip_address)
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.verify_vlan_request(vlan_id)
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN is present in the output
            vlan_present = re.search(f"vlan {vlan_id}", verification_reply.xml)
            if vlan_present:
                print(f"Vlan {vlan_id} is present in the configuration.")
            else:
                self.failed(f"Vlan {vlan_id} is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_name(self):
        vlan_id = 200
        vlan_name = "NewVLAN"
        ip_address = "192.168.20.1/24"

        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request(vlan_id, vlan_name, ip_address)
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.verify_vlan_request(vlan_id)
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN is present in the output
            vlan_present = re.search(f"vlan {vlan_id}", verification_reply.xml)
            if vlan_present:
                print(f"Vlan {vlan_id} is present in the configuration.")
            else:
                self.failed(f"Vlan {vlan_id} is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_with_interface(self):
        vlan_id = 300
        vlan_name = "InterfaceVLAN"
        ip_address = "192.168.30.1/24"
        intf = "Vlan31"

        # Configure VLAN with Interface
        command_request = NetworkLibrary.vlan_configuration_request(vlan_id, vlan_name, ip_address, intf)
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.verify_vlan_request(vlan_id)
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN is present in the output
            vlan_present = re.search(f"vlan {vlan_id}", verification_reply.xml)
            if vlan_present:
                print(f"Vlan {vlan_id} is present in the configuration.")
            else:
                self.failed(f"Vlan {vlan_id} is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vtp_status(self):
        # Configure VTP
        command_request = NetworkLibrary.configure_vtp_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send VTP configuration command: {e}")

        # Verify VTP Status
        verification_request = NetworkLibrary.show_vtp_status_request()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("VTP Status Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VTP mode is present in the output
            vtp_present = re.search("VTP Version", verification_reply.xml)
            if vtp_present:
                print("VTP status is correctly configured.")
            else:
                self.failed("VTP status is not correctly configured.")
        except Exception as e:
            self.failed(f"Failed to send VTP status verification command: {e}")

    @aetest.test
    def configure_system_vlan(self):
        vlan_id = 400

        # Configure System VLAN
        command_request = NetworkLibrary.system_vlan_configuration_request(vlan_id)
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send System VLAN configuration command: {e}")

        # Verify System VLAN configuration
        verification_request = NetworkLibrary.verify_system_vlan_request(vlan_id)
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("System VLAN Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if System VLAN is present in the output
            vlan_present = re.search(f"system vlan {vlan_id}", verification_reply.xml)
            if vlan_present:
                print(f"System Vlan {vlan_id} is present in the configuration.")
            else:
                self.failed(f"System Vlan {vlan_id} is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send System VLAN verification command: {e}")

    @aetest.test
    def configure_vlan_counters_reserved(self):
        # Send VLAN Counters Reserved command
        try:
            summary_reply = self.device.nc.request(NetworkLibrary.vlan_counters_reserved_request())
            print("VLAN Counters Reserved Reply:")
            print(summary_reply)

            assert "Reserved VLAN counters" in summary_reply.xml, "Reserved VLAN counters information is not found."
        except Exception as e:
            self.failed(f"Failed to send VLAN counters reserved command: {e}")

    @aetest.cleanup
    def cleanup(self):
        # Disconnect from the device
        self.device.nc.disconnect()
        print("NETCONF connected after disconnect:", self.device.nc.connected)

if __name__ == "__main__":
    aetest.main()

###### network_lib.py ########

from pyats.topology import loader

class NetworkLibrary:
    @staticmethod
    def get_testbed():
        return loader.load("testbed.yaml")

    @staticmethod
    def connect_to_device(testbed, device_name='n9k1'):
        device = testbed.devices[device_name]
        device.connect(alias='nc', via='netconf')
        return device

    @staticmethod
    def vlan_configuration_request(vlan_id, vlan_name, ip_address, intf="Vlan21"):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan {vlan_id} ; name {vlan_name} ; interface {intf} ; ip address {ip_address}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def verify_vlan_request(vlan_id):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show running-config vlan {vlan_id}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_vlan_summary_request():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vlan summary</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_vtp_status_request():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vtp status</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def system_vlan_configuration_request(vlan_id):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; system vlan {vlan_id}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def verify_system_vlan_request(vlan_id):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="112" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show running-config system vlan {vlan_id}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def vlan_counters_reserved_request():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="113" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vlan counters reserved</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def configure_vtp_request():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="114" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vtp mode transparent</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

###### testbed.yaml ######

devices:
  n9k1:
    type: 'router'
    os: 'nxos'
    connections:
      cli:
        protocol: ssh
        ip: "10.133.35.148"
        port: 22
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.148"
        port: 22
        username: "admin"
        password: "tcs123"
