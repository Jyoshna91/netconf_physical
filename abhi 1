from ncclient import manager,xml_
from pyats.topology import loader
from pyats import aetest
from lxml import etree
from genie.testbed import load
import pdb
from s2_lib import Rip_common_functions
from genie.testbed import load
import re, logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CommonSetup(aetest.CommonSetup):

        @aetest.subsection
        def connect_to_device(self):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k4']
                device.connect(alias='nc', via='netconf')
                if device.nc.connected:
                    print("#####################################################################################")
                    print(" ")
                    print("Device is connected")
                    print(" ")
                    print("#####################################################################################")

class Netconf_rpctest(aetest.Testcase):

        @aetest.setup
        def setup(self):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k4']
                device.connect(alias='nc', via='netconf')
                print(device.nc.connected)

#                Rip_common_functions.configure_rip_routers(device)
#                Rip_common_functions.show_rip_routers(device)
                Rip_common_functions.configure_rip_router_interfaces(device)
                Rip_common_functions.unconfigure_rip_router_interfaces(device)


class CommonCleanup(aetest.CommonCleanup):

        @aetest.subsection
        def disconnect(self, testbed):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k4']
                device.connect(alias='nc', via='netconf')
                device.nc.disconnect()
                if device.nc.connected == False :
                    print("#####################################################################################")
                    print(" ")
                    print("Device is disconnected")
                    print(" ")
                    print("#####################################################################################")











from ncclient import manager,xml_
from pyats.topology import loader
from pyats import aetest
from lxml import etree
from genie.testbed import load
import pdb
from s2_lib import Rip_common_functions
from genie.testbed import load
import re, logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
device_list = ['n9k1','n9k2']

'''
class CommonSetup(aetest.CommonSetup):

        @aetest.subsection
        def connect_to_device(self):
                testbed = loader.load("testbed.yaml")
#                device_list = ['n9k1','n9k2']
                for d in device_list:
                    device = testbed.devices[d]
                    device.connect(alias='nc', via='netconf')
                    print("#####################################################################################")
                    print(" ")
                    if device.nc.connected:
                        print("{} is connected".format(d))
                    else:
                        print("{} is not connected".format(d))
                    print(" ")
                    print("#####################################################################################")
'''
class Netconf_rpctest(aetest.Testcase):

        @aetest.setup
        def setup(self):
                testbed = loader.load("testbed.yaml")
                for d in device_list:
                    device = testbed.devices[d]
                    device.connect(alias='nc', via='netconf')
                    print("#####################################################################################")
                    print(" ")
                    if device.nc.connected:
                        print("{} is connected".format(d))
                    else:
                        print("{} is not connected".format(d))
                    print(" ")
                    print("#####################################################################################")

                Rip_common_functions.configure_rip_routers(device)
#                Rip_common_functions.configure_rip_router_interfaces(device)
                Rip_common_functions.show_rip_routers(device)
                Rip_common_functions.unconfigure_rip_routers(device)
'''
class CommonCleanup(aetest.CommonCleanup):

        @aetest.subsection
        def disconnect(self, testbed):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k1']
                device.connect(alias='nc', via='netconf')
                device.nc.disconnect()
                if device.nc.connected == False :
                    print("#####################################################################################")
                    print(" ")
                    print("Device is disconnected")
                    print(" ")
                    print("#####################################################################################") '''







from ncclient import manager,xml_
from pyats.topology import loader
from pyats import aetest
from lxml import etree
from genie.testbed import load
import pdb
from sample_lib import Rip_common_functions
from genie.testbed import load
import re, logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CommonSetup(aetest.CommonSetup):

        @aetest.subsection
        def connect_to_device(self):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k1']
                device.connect(alias='nc', via='netconf')
                if device.nc.connected:
                    print("#####################################################################################")
                    print(" ")
                    print("Device is connected")
                    print(" ")
                    print("#####################################################################################")

class Netconf_rpctest(aetest.Testcase):

        @aetest.setup
        def setup(self):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k1']
                device.connect(alias='nc', via='netconf')
                print(device.nc.connected)

                Rip_common_functions.configure_rip_routers(device)
                Rip_common_functions.show_rip_routers(device)
                Rip_common_functions.unconfigure_rip_routers(device)

class CommonCleanup(aetest.CommonCleanup):

        @aetest.subsection
        def disconnect(self, testbed):
                testbed = loader.load("testbed.yaml")
                device = testbed.devices['n9k1']
                device.connect(alias='nc', via='netconf')
                device.nc.disconnect()
                if device.nc.connected == False :
                    print("#####################################################################################")
                    print(" ")
                    print("Device is disconnected")
                    print(" ")
                    print("#####################################################################################")
tcs@01HW896031:~/123/sample/codes/mul$







from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.async_.exceptions import *
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Rip_common_functions():

    def show_rip_routers(device):
        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip rip</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""
        reply_command = device.nc.request(command_request)
#        print(reply_command)

#Verification part

        pattern = r'<(mod:inst-name)>rip-([A-Za-z]+.*?)</\1>'

        matches = re.findall(pattern, reply_command)
        print("############################################################################################")
        print(" ")
        for match in matches:
            tag_name, content = match
            print(f"Tag Name: {tag_name}, Content: {content}")
            print("rip-{} is configured".format(content))
        print(" ")
        print("############################################################################################")

    def configure_rip_routers(device):
        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;router rip Enterprise8 ; address-family ipv4 unicast</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

        reply_command = device.nc.request(command_request)
        print(reply_command)

    def unconfigure_rip_routers(device):
        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;no router rip Enterprise8</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

        reply_command = device.nc.request(command_request)
        print(reply_command)

    def configure_rip_maxpath(device):
                        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;router rip Enterprise8 ; address-family ipv4 unicast ;maximum-paths 44</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

                        reply_command = device.nc.request(command_request)
                        print(reply_command)

                        command_request2 = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip rip</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""
#verfication
                        reply_command2 = device.nc.request(command_request2)
                        print(reply_command2)

                #Verification part

                        pattern = r'<(mod:max-paths)>([1-9]|[1-3][0-9]|4[0-4])</\1>'
                        matches = re.findall(pattern, reply_command2)

                        print("############################################################################################")
                        print(" ")

                        for match in matches:
                           tag_name, content = match
                           print(f"Tag Name: {tag_name}, Content: {content}")
                        if match:
                           print("Maximum-path is {} ".format(content))
                        print(" ")
                        print("############################################################################################")



    def configure_rip_distance(device):
                        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;router rip Enterprise8 ; address-family ipv4 unicast ;distance 211</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

                        reply_command = device.nc.request(command_request)
                        print(reply_command)

                        command_request2 = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show ip rip</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""
#verfication
                        reply_command2 = device.nc.request(command_request2)
                        print(reply_command2)

                #Verification part

                        pattern = r'<(mod:admin-dist)>([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])</\1>'
                        matches = re.findall(pattern, reply_command2)

                        print("############################################################################################")
                        print(" ")

                        for match in matches:
                           tag_name, content = match
                           print(f"Tag Name: {tag_name}, Content: {content}")
                        if match:
                           print("Maximum-path is {} ".format(content))
                        print(" ")
                        print("############################################################################################")

    def configure_rip_router_interfaces(device):
        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;router rip 3 ; int eth1/11 ; ip router rip 3</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

        reply_command = device.nc.request(command_request)
        print(reply_command)


    def unconfigure_rip_router_interfaces(device):
        command_request = """
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0"
        message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t ;no router rip 3</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>
"""

        reply_command = device.nc.request(command_request)
        print(reply_command)
