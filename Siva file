from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class NetconfCommonFunctions:
    @staticmethod
    def configure_acl(device, acl_name, rule1):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; ip access-list {acl_name} ; {rule1}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)




from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from netconf_lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global device
        device = testbed.devices['n9k1']
        device.connect(alias='nc', via='netconf')
        assert device.nc.connected, "Device connection failed"

class Testcase(aetest.Testcase):
    @aetest.test
    def configure_acl(self, config_data):
        acl_name = config_data['acl_name']
        rule1 = config_data['rule1']
        try:
            reply_command = NetconfCommonFunctions.configure_acl(device, acl_name, rule1)
            logging.info("Configuration Reply: %s", reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

    @aetest.test
    def verify_acl(self, config_data):
        acl_name = config_data['acl_name']
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            verification_reply = device.nc.request(verification_request)
            logging.info("Verification Reply: %s", verification_reply)
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.cleanup
    def disconnect(self):
        device.nc.disconnect()
        assert not device.nc.connected, "Device disconnection failed"

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        device.nc.disconnect()
        assert not device.nc.connected, "Device disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    parser.add_argument('--config_data', dest='config_data', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))





device1:
  intf: "ethernet1/5"
  ip_address: "192.168.60.1"
device2:
  intf1: "ethernet1/5"
  ip_address1: "192.168.60.2"
  intf2: "ethernet1/9"
  ip_address2: "192.168.11.1"
device3:
  intf: "ethernet1/9"
  ip_address: "192.168.11.2"
subnet_mask: "255.255.255.0"
acl_name: 'aclnqt'
rule1: '10 permit ip 10.10.10.1/24 any'
bound: 'in'
bound1: 'out'




devices:
  n9k1:
    type: 'router'
    connections:
      cli:
        protocol: ssh
        ip: "10.133.35.148"
        port: 22
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.148"
        port: 22
        username: "admin"
        password: "tcs123"




from pyats.easypy import run
import os

def main():
    path = os.path.dirname(__file__)
    run(testscript=os.path.join(path, 'netconf_testcase.py'), datafile=os.path.join(path, 'netconf_datafile.yaml'))


