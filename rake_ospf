#cat testbed.yaml
devices:
  n9k1:
    connections:
      cli:
        ip: 10.133.35.148
        port: 22
        protocol: ssh
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.148"
        port: 22
        username: "admin"
        password: "tcs123"


    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos
    alias: 'dut1'

  n9k4:
    alias: 'dut2'
    connections:
      cli:
        ip: 10.133.35.143
        port: 22
        protocol: ssh
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.143"
        port: 22
        username: "admin"
        password: "tcs123"

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos


  n9k3:
    alias: 'dut3'
    connections:
      cli:
        ip: 10.133.35.152
        port: 22
        protocol: ssh
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.142"
        port: 22
        username: "admin"
        password: "tcs123"

    credentials:
      default:
        password: tcs123
        username: admin
      enable:
        password: tcs123
    os: nxos
    type: nxos

################topology#################
topology:
  n9k1:
    interfaces:
      Ethernet1/5:
        link: uut1_uut3_1
        type: ethernet
  n9k4:
    interfaces:
      Ethernet1/9:
        link: uut2_uut3_1
        type: ethernet
  n9k3:
    interfaces:
      Ethernet1/5:
        link: uut3_uut1_1
        type: ethernet
      Ethernet1/9:
        link: uut3_uut2_1
        type: ethernet

# cat ospf_job.py
from pyats.easypy import run
import os

def main():

    path = os.path.dirname(__file__)
    #run(testscript = os.path.join(path,'acl_testcases.py'),datafile = os.path.join(path,'acl_datafile.yaml'))
    run('testcase5_1.py', datafile = 'ospf_datafile.yaml',pdb=True)

    #run(acl_testcases.py)


#cat testcase_ospf_lib1.py
from ncclient import manager,xml_
from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
from lxml import etree
import pdb
from pyats.async_.exceptions import *
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Ospf_common_functions():
    def configure_ip_address(device):
#        device.configure('''int {intf}\n no switchport\nip address {ip_address} {mask}\n no shut\n end'''.format(intf = intf,ip_address = ip_address, mask = mask))
        testbed = loader.load("testbed.yaml")
        device = testbed.devices['dut1']

        device.connect(alias='nc', via='netconf')
        print(device.nc.connected)
        ip_config = """

    <?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>conf t;int rth1/2;no switchport ;ip address 22.22.22.2/24 ;no shut;end</nxos:cmd>
  <nxos:exec-command>
</nf:rpc>
"""
#    <nxos:cmd>conf t ; int {intf} ; no switchport ; ip address {ip_address} {mask}; no shut;end</nxos:cmd>
        reply_command = device.nc.request(ip_config)
        print(reply_command)

    def enabling_ospf(device):
        testbed = loader.load("testbed.yaml")
        device1 = testbed.devices['dut1']
        device1.connect(alias='nc', via='netconf')
        print(device1.nc.connected)
#
        enb_ospf = """


    <?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>

    <nxos:cmd>conf t ;feature ospf ; end</nxos:cmd>


  </nxos:exec-command>
</nf:rpc>
"""
        reply_command1 = device1.nc.request(enb_ospf)
        print(reply_command1)

    def sh_version(input):
        pattern1 = re.compile('  NXOS: version(?P<version>.*)')
        pattern2 = re.compile('  NXOS image file is: (?P<image>.*)')

        output_dict = {}
        for line in input.split("\n"):
            p1 = pattern1.match(line)
            if p1:
                output_dict.update(p1.groupdict())
            p2 = pattern2.match(line)
            if p2:
                output_dict.update(p2.groupdict())
        return output_dict


#cat testcase5_1.py
from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.results import Passed,Failed
from pyats.async_.exceptions import *
from testcase_ospf_lib1 import Ospf_common_functions

from sample_lib import Rip_common_functions
from ospf_lib import Ospf_common_functions
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
import time
global device_list

class CommonSetup(aetest.CommonSetup):

    @aetest.subsection
    def print_testbed_information(self,testbed):
        #pdb.set_trace()
        global uut1,uut2,uut3,device_list,device_info
        uut1 = testbed.devices['dut1']
        self.parent.parameters.update(uut1 = uut1)
        uut2 = testbed.devices['dut3']
        self.parent.parameters.update(uut2 = uut2)
        uut3 = testbed.devices['dut2']
        self.parent.parameters.update(uut3 = uut3)

        device_list = [uut1,uut2,uut3]
        device_info = {}

        if not testbed:
            logging.info("No testbed was provided to script launch")
        else:
            uut = testbed.devices['dut1']
            for device in testbed:
                logging.info("Device name : %s "%device.name)
                device_info.update({device.name: []})
                for intf in device:
                   logging.info("Interface : %s"%intf.name)
                   device_info[device.name].append(intf.name)
                   if intf.link:
                       logging.info("Link : %s"%intf.link.name)
                   else:
                       logging.info("Link : None")
            logger.info("Device and interfaces used for ospf feature")
            logger.info(device_info)

    @aetest.subsection
    def connect_to_devices(self,testbed):
        logger.info("Connecting to devices")


#    @aetest.subsection
#    def configure_ip_address_to_interfaces(self):
#        logger.info("Assign ip address to interfaces")

        #for dev in device_info.keys():
#        Ospf_common_functions.configure_ip_address(uut1)
#        Ospf_common_functions.configure_ip_address(uut1,device1['intf'],device1['ip_address'],subnet_mask)
#        Ospf_common_functions.configure_ip_address(uut1,device1['intf1'],device1['ip_address1'],subnet_mask)
#        Ospf_common_functions.configure_ip_address(uut2,device2['intf1'],device2['ip_address1'],subnet_mask)
#        Ospf_common_functions.configure_ip_address(uut2,device2['intf2'],device2['ip_address2'],subnet_mask)
#        Ospf_common_functions.configure_ip_address(uut3,device3['intf'],device3['ip_address'],subnet_mask)
#        Ospf_common_functions.configure_ip_address(uut3,device3['intf1'],device3['ip_address1'],subnet_mask)
#        Ospf_common_functions.configure_loopback_ip_address(uut3,device3['intf2'],device3['ip_address2'],subnet_mask)
    @aetest.subsection
    def configure_ip_address_to_interfaces(self):
        testbed = loader.load("testbed.yaml")
        device = testbed.devices['dut1']
        device.connect(alias='nc', via='netconf')
        print(device.nc.connected)

#        Rip_common_functions.configure_rip_routers(device)
#        Ospf_common_functions.configure_ip_address(device)
        Ospf_common_functions.configure_ip_address(device,device1['intf'],device1['ip_address'],subnet_mask)
        Ospf_common_functions.configure_ip_address(device,device1['intf1'],device1['ip_address1'],subnet_mask)
        Ospf_common_functions.configure_ip_address(device,device2['intf1'],device2['ip_address1'],subnet_mask)
        Ospf_common_functions.configure_ip_address(device,device2['intf2'],device2['ip_address2'],subnet_mask)
        Ospf_common_functions.configure_ip_address(device,device3['intf'],device3['ip_address'],subnet_mask)
        Ospf_common_functions.configure_ip_address(device,device3['intf1'],device3['ip_address1'],subnet_mask)


    @aetest.subsection
    def enabling_ospf_on_devices(self,testbed):
        testbed = loader.load("testbed.yaml")
        device = testbed.devices['n9k1']
        device.connect(alias='nc', via='netconf')
        print(device.nc.connected)
        logger.info("Enabling Ospf on devices")
        Ospf_common_functions.enabling_ospf(device)
#        Ospf_common_functions.enabling_ospf(uut2)
#        Ospf_common_functions.enabling_ospf(uut3)
