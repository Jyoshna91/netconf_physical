devices:
  n9k1:
    type: 'router'
    connections:
      cli:
        protocol: ssh
        ip: "10.133.35.148"
        port: 22
      netconf:
        class: yang.connector.Netconf
        ip: "10.133.35.148"
        port: 22
        username: "admin"
        password: "tcs123"



from pyats.topology import loader
from genie.testbed import load
from pyats import aetest
import re, logging

# Load the testbed YAML file
testbed = loader.load("testbed.yaml")

# Access the device using the name 'n9k1'
device = testbed.devices['n9k1']

# Connect to the device via netconf
device.connect(alias='nc', via='netconf')

print("NETCONF connected:", device.nc.connected)

# Define the configuration XML structure for VLAN configuration
vlan_config_request = """
<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
    <nxos:exec-command>
        <nxos:cmd>conf t ; vlan 100 ; name test_vlan</nxos:cmd>
    </nxos:exec-command>
</nf:rpc>
"""

# Send the VLAN configuration command
try:
    reply_command = device.nc.request(vlan_config_request)
    print("VLAN Configuration Reply:")
    print(reply_command)
except Exception as e:
    print(f"Failed to send VLAN configuration command: {e}")

# Define the verification XML structure for VLAN
vlan_verification_request = """
<?xml version="1.0" encoding="UTF-8"?>
<nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
    <nxos:exec-command>
        <nxos:cmd>show vlan brief</nxos:cmd>
    </nxos:exec-command>
</nf:rpc>
"""

# Send the verification command for VLAN
try:
    verification_reply = device.nc.request(vlan_verification_request)
    print("VLAN Verification Reply:")
    print(verification_reply)
except Exception as e:
    print(f"Failed to send VLAN verification command: {e}")

# Disconnect from the device
device.nc.disconnect()

# Check if the connection is closed
print("NETCONF connected after disconnect:", device.nc.connected)


testcase 2:- 
from pyats.topology import loader
from pyats import aetest

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Load the testbed YAML file
        self.testbed = loader.load("testbed.yaml")
        # Access the device using the name 'n9k1'
        self.device = self.testbed.devices['n9k1']
        # Connect to the device via netconf
        self.device.connect(alias='nc', via='netconf')
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

    @aetest.test
    def configure_vlan(self):
        # Define the NETCONF request for VLAN configuration
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan 10 ; name TestVLAN ; interface Vlan10 ; ip address 192.168.10.1/24</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

        # Send the configuration command
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

    @aetest.test
    def verify_vlan(self):
        # Define the verification XML structure
        verification_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show running-config interface Vlan10</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

        # Send the verification command
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.cleanup
    def cleanup(self):
        # Disconnect from the device
        self.device.nc.disconnect()
        print("NETCONF connected after disconnect:", self.device.nc.connected)

if __name__ == "__main__":
    aetest.main()
