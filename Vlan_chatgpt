from pyats import aetest
from network_lib import NetworkLibrary
import re

class CommonSetup(aetest.CommonSetup):

    @aetest.subsection
    def connect_to_device(self, testbed):
        # Load the testbed
        self.testbed = NetworkLibrary.get_testbed()
        # Connect to the device
        self.device = NetworkLibrary.connect_to_device(self.testbed)
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Get the device from common setup
        self.device = self.parent.parameters['device']

    @aetest.test
    def configure_vlan(self):
        # Get the VLAN configuration request
        command_request = NetworkLibrary.vlan_configuration_request()

        # Send the configuration command
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

    @aetest.test
    def verify_vlan(self):
        # Get the verification request
        verification_request = NetworkLibrary.verify_vlan_request()

        # Send the verification command
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if Vlan21 is present in the output
            vlan_present = re.search(r'interface Vlan21', verification_reply)
            if vlan_present:
                print("Vlan21 is present in the configuration.")
            else:
                self.failed("Vlan21 is not present in the configuration.")

        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

class CommonCleanup(aetest.CommonCleanup):

    @aetest.subsection
    def disconnect_from_device(self):
        # Get the device from common setup
        device = self.parent.parameters['device']
        # Disconnect from the device
        device.nc.disconnect()
        print("NETCONF connected after disconnect:", device.nc.connected)

if __name__ == "__main__":
    aetest.main()
