from pyats.topology import loader
from pyats import aetest

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Load the testbed YAML file
        self.testbed = loader.load("testbed.yaml")
        # Access the device using the name 'n9k1'
        self.device = self.testbed.devices['n9k1']
        # Connect to the device via netconf
        self.device.connect(alias='nc', via='netconf')
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

    @aetest.test
    def configure_vlan(self):
        # Define the NETCONF request for VLAN configuration
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan 21 ; name TestVLAN2 ; interface Vlan21 ; ip address 192.168.10.1/24</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

        # Send the configuration command
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

    @aetest.test
    def verify_vlan(self):
        # Define the verification XML structure
        verification_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show running-config interface Vlan10</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

        # Send the verification command
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.cleanup
    def cleanup(self):
        # Disconnect from the device
        self.device.nc.disconnect()
        print("NETCONF connected after disconnect:", self.device.nc.connected)

if __name__ == "__main__":
    aetest.main()
