#testcase -vlan3
from pyats import aetest
from network_lib import NetworkLibrary
import re

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Load the testbed
        self.testbed = NetworkLibrary.get_testbed()
        # Connect to the device
        self.device = NetworkLibrary.connect_to_device(self.testbed)
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

    @aetest.test
    def configure_vlan_id(self):
        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_vlan()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN is present in the output
            vlan_present = re.search(r"\b100\b", verification_reply)
            if vlan_present:
                print("100 is present in the configuration.")
            else:
                self.failed("100 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_name(self):
        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_vlan_name()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN name is present in the output
            vlan_present = re.search(r"\bdefault_vlan\b", verification_reply)
            if vlan_present:
                print("VLAN name 'default_vlan' is present in the configuration.")
            else:
                self.failed("VLAN name 'default_vlan' is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_with_interface(self):
        # Configure VLAN with Interface
        command_request = NetworkLibrary.vlan_configuration_request_with_interface()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_running_config_interface()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN interface is present in the output
            vlan_present = re.search(r"\binterface Vlan31\b", verification_reply)
            if vlan_present:
                print("Interface Vlan31 is present in the configuration.")
            else:
                self.failed("Interface Vlan31 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vtp_status(self):
        # Configure VTP
        command_request = NetworkLibrary.configure_vtp_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send VTP configuration command: {e}")

        # Verify VTP Status
        verification_request = NetworkLibrary.show_vtp_status_request()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("VTP Status Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VTP mode is present in the output
            vtp_present = re.search(r"\bmax_vlan_supported_local\b", verification_reply)
            if vtp_present:
                print("VTP status is correctly configured.")
            else:
                self.failed("VTP status is not correctly configured.")
        except Exception as e:
            self.failed(f"Failed to send VTP status verification command: {e}")

    @aetest.test
    def configure_system_vlan_reserve(self):
        # Configure System VLAN
        command_request = NetworkLibrary.system_vlan_reserve()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send System VLAN configuration command: {e}")

        # Verify System VLAN configuration
        verification_request = NetworkLibrary.verify_system_vlan_reserve()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("System VLAN Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if System VLAN is present in the output
            vlan_present = re.search(r"\bcurrent_reserved_vlan_start\b", verification_reply)
            if vlan_present:
                print("System Vlan 2000 is present in the configuration.")
            else:
                self.failed("System Vlan 2000 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send System VLAN verification command: {e}")

    @aetest.cleanup
    def cleanup(self):
        # Disconnect from the device
        self.device.nc.disconnect()
        print("NETCONF connected after disconnect:", self.device.nc.connected)

if __name__ == "__main__":
    aetest.main()

#lib file:-


