from pyats.topology import loader

class NetworkLibrary:
    VLAN_ID = 100
    VLAN_NAME = "default_vlan"
    VLAN_INT = "Vlan31"
    VLAN_IP = "192.168.1.1/24"
    start_vlan1 = 2000
    state11 = "active"


    @staticmethod
    def get_testbed():
        return loader.load("testbed.yaml")

    @staticmethod
    def connect_to_device(testbed, device_name='n9k1'):
        device = testbed.devices[device_name]
        device.connect(alias='nc', via='netconf')
        return device

    @staticmethod
    def vlan_configuration_request(vlan_id=VLAN_ID, vlan_name=VLAN_NAME, ip_address=VLAN_IP, intf="Vlan21"):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan {vlan_id} ; name {vlan_name} ; interface {intf} ; ip address {ip_address}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def vlan_configuration_request_with_interface(vlan_id=VLAN_ID, vlan_name=VLAN_NAME, ip_address=VLAN_IP, intf=VLAN_INT):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan {vlan_id} ; name {vlan_name} ; interface {intf} ; ip address {ip_address}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_vlan():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="106" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vlan</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_vlan_name(vlan_name=VLAN_NAME):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="113" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vlan name {vlan_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_running_config_interface(intf=VLAN_INT):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show running-config interface {intf}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def configure_vtp_request(vlan_id=VLAN_ID, vlan_name=VLAN_NAME, state1=state11):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; vlan {vlan_id} ; name {vlan_name} ; state {state1}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def show_vtp_status_request():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="112" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show vtp status</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def system_vlan_reserve(start_vlan=start_vlan1):
        return f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>configure terminal ; system vlan {start_vlan} reserve</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """

    @staticmethod
    def verify_system_vlan_reserve():
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="114" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show system vlan reserved</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """



#############testcase@@@@@@@@@@@@
from pyats import aetest
from network_lib import NetworkLibrary
import re

class VlanConfigTest(aetest.Testcase):

    @aetest.setup
    def setup(self):
        # Load the testbed
        self.testbed = NetworkLibrary.get_testbed()
        # Connect to the device
        self.device = NetworkLibrary.connect_to_device(self.testbed)
        assert self.device.nc.connected, "Failed to connect to device via NETCONF"

    @aetest.test
    def configure_vlan_id(self):
        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_vlan()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN is present in the output
            vlan_present = re.search(r"\b100\b", verification_reply)
            if vlan_present:
                print("100 is present in the configuration.")
            else:
                self.failed("100 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_name(self):
        # Configure VLAN
        command_request = NetworkLibrary.vlan_configuration_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_vlan_name()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN name is present in the output
            vlan_present = re.search(r"\bdefault_vlan\b", verification_reply)
            if vlan_present:
                print("VLAN name 'default_vlan' is present in the configuration.")
            else:
                self.failed("VLAN name 'default_vlan' is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vlan_with_interface(self):
        # Configure VLAN with Interface
        command_request = NetworkLibrary.vlan_configuration_request_with_interface()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

        # Verify VLAN configuration
        verification_request = NetworkLibrary.show_running_config_interface()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VLAN interface is present in the output
            vlan_present = re.search(r"\binterface Vlan31\b", verification_reply)
            if vlan_present:
                print("Interface Vlan31 is present in the configuration.")
            else:
                self.failed("Interface Vlan31 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def configure_vtp_status(self):
        # Configure VTP
        command_request = NetworkLibrary.configure_vtp_request()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send VTP configuration command: {e}")

        # Verify VTP Status
        verification_request = NetworkLibrary.show_vtp_status_request()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("VTP Status Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if VTP mode is present in the output
            vtp_present = re.search(r"\bmax_vlan_supported_local\b", verification_reply)
            if vtp_present:
                print("VTP status is correctly configured.")
            else:
                self.failed("VTP status is not correctly configured.")
        except Exception as e:
            self.failed(f"Failed to send VTP status verification command: {e}")

    @aetest.test
    def configure_system_vlan_reserve(self):
        # Configure System VLAN
        command_request = NetworkLibrary.system_vlan_reserve()
        try:
            reply_command = self.device.nc.request(command_request)
            print("Configuration Reply:")
            print(reply_command)
        except Exception as e:
            self.failed(f"Failed to send System VLAN configuration command: {e}")

        # Verify System VLAN configuration
        verification_request = NetworkLibrary.verify_system_vlan_reserve()
        try:
            verification_reply = self.device.nc.request(verification_request)
            print("System VLAN Verification Reply:")
            print(verification_reply)

            # Use regular expression to check if System VLAN is present in the output
            vlan_present = re.search(r"\bcurrent_reserved_vlan_start\b", verification_reply)
            if vlan_present:
                print("System Vlan 2000 is present in the configuration.")
            else:
                self.failed("System Vlan 2000 is not present in the configuration.")
        except Exception as e:
            self.failed(f"Failed to send System VLAN verification command: {e}")

    @aetest.cleanup
    def cleanup(self):
        # Disconnect from the device
        self.device.nc.disconnect()
        print("NETCONF connected after disconnect:", self.device.nc.connected)

if __name__ == "__main__":
    aetest.main()


#####################regex:-
import re
verification_reply=""" <?xml version="1.0" encoding="ISO-8859-1"?>
<nf:rpc-reply xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0" xmlns:mod="http://www.cisco.com/nxos:1.0:vlan_mgr_cli" message-id="113">
  <nf:data>
    <mod:show>
      <mod:vlan>
        <mod:name>
          <mod:vname>
            <mod:__XML__PARAM_value>default_vlan</mod:__XML__PARAM_value>
            <mod:__XML__OPT_Cmd_show_vlan_name___readonly__>
              <mod:__readonly__>
                <mod:TABLE_vlanbriefname>
                  <mod:ROW_vlanbriefname>
                    <mod:vlanshowbr-vlanid>100</mod:vlanshowbr-vlanid>
                    <mod:vlanshowbr-vlanid-utf>100</mod:vlanshowbr-vlanid-utf>
                    <mod:vlanshowbr-vlanname>default_vlan</mod:vlanshowbr-vlanname>
                    <mod:vlanshowbr-vlanstate>active</mod:vlanshowbr-vlanstate>
                    <mod:vlanshowbr-shutstate>noshutdown</mod:vlanshowbr-shutstate>
                  </mod:ROW_vlanbriefname>
                </mod:TABLE_vlanbriefname>
                <mod:TABLE_mtuinfoname>
                  <mod:ROW_mtuinfoname>
                    <mod:vlanshowinfo-vlanid>100</mod:vlanshowinfo-vlanid>
                    <mod:vlanshowinfo-media-type>enet</mod:vlanshowinfo-media-type>
                    <mod:vlanshowinfo-vlanmode>ce-vlan</mod:vlanshowinfo-vlanmode>
                  </mod:ROW_mtuinfoname>
                </mod:TABLE_mtuinfoname>
                <mod:vlanshowrspan-vlantype>notrspan</mod:vlanshowrspan-vlantype>
              </mod:__readonly__>
            </mod:__XML__OPT_Cmd_show_vlan_name___readonly__>
          </mod:vname>
        </mod:name>
      </mod:vlan>
    </mod:show>
  </nf:data>
</nf:rpc-reply>"""

#vlan_present = re.findall(r'[a-z]{7}+_[a-z]{4}', verification_reply)
#vlan_present = re.findall(r"\bd[a-z]+\_+\bv[a-z]", verification_reply)
vlan_present = re.findall(r"\bd[a-z]+\W\bv[a-z]+", verification_reply)  #only default_vlan should be present in vlan_present
print(vlan_present)


vlan_present = re.findall(r'<[a-z]+:[a-z-]+>default_vlan<\/[a-z]+:[a-z-]+>', verification_reply)
